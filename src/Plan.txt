Symulacja dylematu więźnia

klasy:

- Player - klasa parent zawierająca cechy gracza i jego taktykę
- ResponsePair - struktura danych odzwierciedlająca odpowiedzi w rundzie

  EXPERIMENT - Defines the initial number of players and number of waves they are going to play
    |          as well as the rules of waves.
    |
    |
    V
  WAVE   - creates games between all players, sums up the total points and determines which players should be eliminated
    |      based on total points accumulated in all the games of the wave.
    |      (scope: ALL PLAYERS)
    |
    V
  GAME   - consists of number of matches between two players. Ends with totalPoints scored and number of matches won.
    |      (scope: TWO PLAYERS)
    |
    V
  MATCH  - series of encounters that accumulates points from the rounds.
    |      The winner's total score from the round is increased by a bonus.
    |      (scope: TWO PLAYERS)
    |
    V
  ROUND  - one encounter where player cooperate or defect
            (scope: TWO PLAYERS)

        TODO Add waveId to matchrecord table.
        TODO Clarify why the newly added players tend to perform weaker
         THE ADDED PLAYER IS ALWAYS PARENT CLASS PLAYER

        TODO (NOT SURE): Players are gonna play with themselves during the wave also



Tabele:

    - players : opis graczy biorących udział w danym eksperymencie.

    CREATE TABLE players (
        experimentId VARCHAR(100) NOT NULL,
        playerId INT NOT NULL,
        name VARCHAR(50) NOT NULL,
        waveJoined INT NOT NULL,
        strategyType VARCHAR(50) NOT NULL,
        strategyTemper VARCHAR(50) NOT NULL,
        description VARCHAR(255) NOT NULL,
        PRIMARY KEY (experimentId, playerId)
        );



    - experimentrecord : szczegóły eksperymentu, punktacja ilość meczy, rund itp, ilość srategii danego typu

    CREATE TABLE experimentrecord (
            experimentId VARCHAR(100) NOT NULL,
            cooperationPoints INT NOT NULL,
            oneSideBetrayalPoints INT NOT NULL,
            twoSideBetrayalPoints INT NOT NULL,
            waves INT NOT NULL,
            matches INT NOT NULL,
            rounds INT NOT NULL,
            numEliminatedPerWave INT NOT NULL,
            winnersPremium DECIMAL(10, 2) NOT NULL,
            description VARCHAR(255) NOT NULL,
            PRIMARY KEY (experimentId)
            );


    - waveresults : miejsca z danej fali

    CREATE TABLE waveresult (
        waveId VARCHAR(100) NOT NULL,
        playerId INT NOT NULL,
        spot INT NOT NULL,
        totalScore INT NOT NULL,
        wasEliminated BOOLEAN NOT NULL,
        PRIMARY KEY (waveId)
        );




    - matchrecord : szczegóły meczu, lewy, prawy gracz IDs, ostateczne punkty, zwycięzca

    CREATE TABLE matchrecord (
        waveId VARCHAR(100) NOT NULL,
        gameId INT NOT NULL,
        matchId INT NOT NULL,
        leftPlayerId INT NOT NULL,
        rightPlayerId INT NOT NULL,
        leftPlayerFinalScore INT NOT NULL,
        rightPlayerFinalScore INT NOT NULL,
        winnerId INT NOT NULL,
        PRIMARY KEY (gameId, matchId)
    );

    - roundrecord : przebieg wszystkich rund, odpowiedzi graczy, wynik (Do usunięcia players IDs, Do DODANIA current score lewego i prawego gracza)

    CREATE TABLE roundrecord (
            gameId INT NOT NULL,
            matchId INT NOT NULL,
            roundId INT NOT NULL,
            leftPlayerResponse BOOLEAN NOT NULL,
            rightPlayerResponse BOOLEAN NOT NULL,
            outcome VARCHAR(255) NOT NULL,
            leftPlayerCurrentPoints INT NOT NULL,
            rightPlayerCurrentPoints INT NOT NULL,
            PRIMARY KEY (gameId, matchId, roundId)
        );

